# Originally based on:
# https://raw.githubusercontent.com/grafana/loki/main/clients/cmd/promtail/promtail-local-config.yaml

server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  # uncomment this line if you want to send logs to a local Loki OSS instance instead
  # - url: http://localhost:3100/loki/api/v1/push

  # Grafana Cloud endpoint details
  - url: ${LOGS_ENDPOINT}/loki/api/v1/push
    basic_auth:
      username: ${LOGS_USERNAME}
      password: ${GRAFANA_CLOUD_API_KEY}

scrape_configs:
- job_name: applogs

  static_configs:
  - targets:
      - localhost
    labels:
      # Path to look for logs to send to Grafana Cloud Logs
      __path__: /var/log/flog/*log
      __path_exclude__: /var/log/flog/*bak

      # Logs will have the "filename" label added to them.
      # Assign these additional labels:
      job: floglogs
      hostname: demohost
      region: emea

  pipeline_stages:

  # An example pipeline, showing how to parse a JSON-formatted log entry
  # and extract some additional labels to add to it at source.
  #
  # TIP: prefer to define labels that describe the topology or provenance
  # of the log stream (where the log came from), rather than the logs' contents
  # (what's in the log).
  - match: 
      # Only run this pipeline if the job label is set to floglogs
      selector: '{job="floglogs"}'
      pipeline_name: 'extract-http-method-and-protocol'
      stages:
      - json:
          expressions:
            http_method: method
            http_protocol: protocol
      - labels:
          http_method:
          http_protocol:

  # Another pipeline which also runs on the "floglogs" stream, and sanitises
  # sensitive IP addresses and usernames before sending to Loki/Grafana Cloud
  #
  # It looks for IP addresses and usernames by regex, replacing them with
  # hash values. This allows correlation across logs, without exposing the
  # original IP address and username.
  - match:
      selector: '{job="floglogs"}'
      pipeline_name: 'sanitise-user-and-ip'
      stages:
      - replace:
          expression: '(\d{1,3}[.]\d{1,3}[.]\d{1,3}[.]\d{1,3})'
          replace: 'hash-{{ .Value | Hash "salt" }}'
      - replace:
          expression: '"user-identifier":"(\w+)"'
          replace: '{{ .Value | Hash "salt" }}'
