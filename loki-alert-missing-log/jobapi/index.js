// Demo app generated by Claude
const express = require('express');
const bodyParser = require('body-parser');
const { v4: uuidv4 } = require('uuid');

const app = express();
app.use(bodyParser.json());

// In-memory job storage
const jobs = {};

// Simple job logging functionality
const logJob = (job, message, isError = false) => {
    const logMethod = isError ? console.error : console.log;
    const timestamp = new Date().toISOString();
    logMethod(`[${timestamp}] [Job: ${job.id}] ${message}`);
};

// Start a job
app.post('/api/jobs', (req, res) => {
    const { name, duration, shouldSucceed } = req.body;

    if (!name || !duration || typeof shouldSucceed !== 'boolean') {
        return res.status(400).json({
            error: 'Missing required parameters. Please provide name, duration, and shouldSucceed'
        });
    }

    const jobId = uuidv4();

    jobs[jobId] = {
        id: jobId,
        name,
        status: 'running',
        startTime: new Date(),
        duration,
        shouldSucceed
    };

    // Simulate job execution with sleep
    console.log(`job="${name}" jobId=${jobId} event=started at ${new Date().toISOString()}`);

    const jobPromise = new Promise((resolve) => {
        setTimeout(() => {
            if (jobs[jobId]) {
                const success = jobs[jobId].shouldSucceed;
                const status = success ? 'completed' : 'failed';
                jobs[jobId].status = status;
                jobs[jobId].endTime = new Date();

                // Log completion status
                if (success) {
                    console.log(`✅ SUCCESS: job="${name}" jobId=${jobId} event=completed-successfully after ${duration}ms at ${jobs[jobId].endTime.toISOString()}`);
                } else {
                    console.error(`❌ FAILURE: job="${name}" jobId=${jobId} event=failed after ${duration}ms at ${jobs[jobId].endTime.toISOString()}`);
                }

                resolve(status);
            }
        }, duration);
    });

    // Return immediately but keep job running in background
    jobPromise.catch(err => {
        console.error(`Error in job="${name}" jobId=${jobId} :`, err);
        if (jobs[jobId]) {
            jobs[jobId].status = 'error';
            jobs[jobId].error = err.message;
        }
    });

    res.status(201).json({
        jobId,
        message: `job="${name}" jobId=${jobId} started successfully`,
        status: 'running'
    });
});

// Get job status
app.get('/api/jobs/:jobId', (req, res) => {
    const { jobId } = req.params;

    if (!jobs[jobId]) {
        return res.status(404).json({ error: 'Job not found' });
    }

    res.json(jobs[jobId]);
});

// Get all jobs
app.get('/api/jobs', (req, res) => {
    res.json(Object.values(jobs));
});

// Cancel a job
app.delete('/api/jobs/:jobId', (req, res) => {
    const { jobId } = req.params;

    if (!jobs[jobId]) {
        return res.status(404).json({ error: 'Job not found' });
    }

    if (jobs[jobId].status === 'running') {
        jobs[jobId].status = 'cancelled';
        jobs[jobId].endTime = new Date();
        logJob(jobs[jobId], `Job "${jobs[jobId].name}" cancelled manually`);
    }

    res.json({
        message: `Job "${jobs[jobId].name}" cancelled`,
        job: jobs[jobId]
    });
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Job API server running on port ${PORT}`);
});